		import java.util.*;
		class CheapestFlightKStop

		{
		   static class Edge
		   {
			   int src;
			   int dest;
			   int wt;
			   Edge(int src, int dest, int wt){
				this.src=src;
				this.wt=wt;
				this.dest=dest;
			   }
		   }
		   static  class  Info
		   {
			   int v;
			   int cost;
			   int stop;
			   Info(int v,int c,int s){
				this.cost=c;
				this.v=v;
				this.stop=s;
			   }
		   }
		   public static void creategraph(ArrayList<Edge>graph[],int flight[][]){
			for (int i=0;i<graph.length ;i++ )
			{
				graph[i]=new ArrayList<>();
			}
			for (int i=0;i<flight.length ;i++ )
			{
				int src=flight[i][0];
			int dest=flight[i][1];
				int wt=flight[i][2];
			Edge e=new Edge(src,dest,wt);
			graph[src].add(e);
			}
		   }
		   public static  int cheapestFlight(int n, int k, int flight[][], int src, int dest){
			ArrayList<Edge> graph[]=new ArrayList[n];
			   creategraph(graph,flight);
			   int dist[]=new int [n];// distance declare array
			   for (int i=0;i<dist.length ; i++)  // initialization of remaining vertex
			   {
				   if (i!=src)
				   {
					   dist[i]=Integer.MAX_VALUE;
				   }
			   }
			   // queue declare
			   Queue<Info> q=new LinkedList<>();
			   q.add(new Info(src,0 ,0));
			   while (! q.isEmpty())
			   {
				   Info curr=q.remove();
				   // greater than stop not processed
				   if (curr.stop>k)
				   {
					   break;
				   }
				   for (int i=0;i<graph[curr.v].size() ;i++ )
				   {
					   Edge e=graph[curr.v].get(i);
					   // relaxtion
					   int u=e.src;
					   int v=e.dest;
					   int wt=e.wt;
					   if (dist[u] != Integer.MAX_VALUE && dist[u]+wt<dist[v] && curr.stop <= k)
					   {
						   dist[v]=dist[u]+wt;
						   q.add(new Info(v,dist[v],curr.stop+1));
					   }
				   }
			   }
			   // dist[dest]
			   if (dist[dest] != Integer.MAX_VALUE)
			   {
				   return -1;
			   }
			   else{
				   return dist[dest];
		   }
		   }

			public static void main(String[] args) 
				{
						 int n=4;
						 int src=0,dist=3, k=1;
						 int flight[][]={{0,1,100},{1,2,100},{2,0,100},{1,3,600},{2,3,200}};
					int result=	cheapestFlight( n,k,flight, src, dist);
					System.out.println(result);
				}

		}
