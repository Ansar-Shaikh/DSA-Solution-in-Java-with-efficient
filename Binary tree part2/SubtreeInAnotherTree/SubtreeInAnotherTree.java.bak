import java.util.*;
class  SubtreeInAnotherTree

{
	static class Node
	{
		int data;
		Node right;
		Node left;
		Node(int data){
			this.data=data;
			this.left=null;
			this.right=null;
		}
	}
	public static boolean isIdentical(Node node, Node subroot){
		// 4 step
		if (node==null && subroot==null)
		{
			return true; // both are null otherwise false
		}
		else if (node== null || subroot== null || node.data!= subroot.data)
		{
			return false; // non identical
		}
		if (!isIdentical(node.left,subroot))
		{
			return false;// whole left side of main tree 
		}
		if (!isIdentical(node.right,subroot))
		{
			return false;// whole right side of main tree 
		}
		return true;
	}
	public static boolean isSubtree(Node root , Node subroot){
		if (root == null)
		{
			return false;
		}
		if (root.data== subroot.data)
		{
			if (isIdentical(root ,subroot))
			{
				return true;
			}
		}
		return isSubtree(root.left,subroot) || isSubtree(root.right,subroot);
	}
	public static void main(String[] args) 
	{
		// main tree
				Node root=new Node(1);
	    root.left=new Node(2);
		root.right=new Node(3);
		root.left.left=new Node(4);
		root.left.right=new Node(5);
		root.right.left=new Node(6);
		root.right.right=new Node(7);
				root.right.right.right=new Node(8);
				// subtree
			/*
			   2
			  / \
			 4   5
			 */

				Node subroot=new Node(2);
				subroot.left=new Node(4);
				 subroot.right=new Node(5);
		System.out.println(" subtree is in another tree or not :"+isSubtree(root,subroot));
	}
}
